app.MapPost("/auth/link", async (HttpContext http, AppDbContext db) =>
{
    // This endpoint requires valid Bearer token (MSAL) so add [RequireAuthorization] via Minimal API below
    var body = await http.Request.ReadFromJsonAsync<Dictionary<string,string>>() ?? new();
    if (!body.TryGetValue("patientId", out var patientIdStr) || !Guid.TryParse(patientIdStr, out var patientGuid))
        return Results.BadRequest(new { error = "patientId required" });

    if (!body.TryGetValue("linkToken", out var linkTokenPlain) || string.IsNullOrWhiteSpace(linkTokenPlain))
        return Results.BadRequest(new { error = "linkToken required" });

    // Get signed-in user's object id (oid) or sub fallback
    var oid = http.User.FindFirst("oid")?.Value ?? http.User.FindFirst("sub")?.Value;
    if (string.IsNullOrEmpty(oid)) return Results.Unauthorized();

    // Validate link token
    var linkSecret = builder.Configuration["LINK_TOKEN_HMAC_SECRET"] ?? builder.Configuration["OTP_HMAC_SECRET"];
    if (string.IsNullOrEmpty(linkSecret)) return Results.StatusCode(500);

    var valid = await AuthService.Services.LinkTokenHelper.ValidateAndConsumeLinkTokenAsync(db, patientGuid, linkTokenPlain, linkSecret);
    if (!valid) return Results.BadRequest(new { error="invalid_or_expired_link_token" });

    // Prevent linking same providerSubject twice
    var exists = await db.AuthIdentities.FirstOrDefaultAsync(a => a.Provider == "Microsoft" && a.ProviderSubject == oid);
    if (exists != null)
    {
        return Results.Conflict(new { error="identity_already_linked" });
    }

    // Create AuthIdentity
    var authIdentity = new AuthIdentity {
        PatientId = patientGuid,
        Provider = "Microsoft",
        ProviderSubject = oid,
        VerifiedAt = DateTime.UtcNow,
        IsPrimary = true,
        IsActive = true,
        CreatedAt = DateTime.UtcNow
    };
    db.AuthIdentities.Add(authIdentity);

    db.AuditLogs.Add(new AuditLog {
        PatientId = patientGuid,
        Actor = oid,
        Action = "identity_linked",
        Details = $"{{\"provider\":\"Microsoft\",\"oid\":\"{oid}\"}}",
        Ip = http.Connection.RemoteIpAddress?.ToString(),
        UserAgent = http.Request.Headers["User-Agent"].FirstOrDefault(),
        CreatedAt = DateTime.UtcNow
    });

    await db.SaveChangesAsync();

    return Results.Ok(new { status="linked" });
}).RequireAuthorization("Patient.Read"); // ensure this policy matches your scope check
