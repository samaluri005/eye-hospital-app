"use client";

import React, { useState } from "react";
import { useMsal } from "@azure/msal-react";
import { loginRequest } from "@/lib/msalConfig";

/**
 * Props:
 *  - patientId: Guid returned from /signup/verify
 *  - linkToken: short-lived token returned from /signup/verify (plaintext)
 *  - onLinked?: optional callback when linking succeeds
 */
export default function LinkAccountClient({
  patientId,
  linkToken,
  onLinked,
}: {
  patientId: string;
  linkToken: string;
  onLinked?: (data?: any) => void;
}) {
  const { instance, accounts } = useMsal();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  // Helper: acquire token (silent -> popup -> redirect fallback)
  async function acquireApiToken(): Promise<string> {
    const scopes = loginRequest.scopes || ["openid", "profile"];
    // ensure API scope is present (loginRequest configured earlier)
    try {
      // try silent first (user may already be signed-in)
      const account = accounts && accounts.length > 0 ? accounts[0] : undefined;
      const silentReq = { scopes, account };
      const silentResult = await instance.acquireTokenSilent(silentReq);
      return silentResult.accessToken;
    } catch (silentErr) {
      // silent failed: try interactive popup
      try {
        const popupResult = await instance.acquireTokenPopup({ scopes });
        return popupResult.accessToken;
      } catch (popupErr) {
        // popup may be blocked — fall back to redirect
        // Use loginRedirect to interactive sign-in; after redirect, you'll need to resume flow (app will re-render and can call acquireTokenSilent)
        // We throw a special string to signal redirect required
        throw new Error("interactive_required");
      }
    }
  }

  // If user is not signed-in, call loginPopup first (or loginRedirect fallback)
  async function ensureSignedIn(): Promise<void> {
    const signedIn = accounts && accounts.length > 0;
    if (signedIn) return;
    try {
      await instance.loginPopup(loginRequest);
      return;
    } catch (err) {
      // popup failed (e.g., blocked) → fallback to redirect
      await instance.loginRedirect(loginRequest);
      // note: loginRedirect navigates away — after redirect back, component will remount and you should call the link step again
      return;
    }
  }

  async function handleLink() {
    setError(null);
    setLoading(true);
    try {
      // 1) Make sure user is signed in (interactive if needed)
      await ensureSignedIn();

      // 2) Acquire access token for API
      let accessToken: string;
      try {
        accessToken = await acquireApiToken();
      } catch (acqErr: any) {
        // interactive required -> we already kicked redirectAbove in ensureSignedIn for loginRedirect case.
        if (acqErr && acqErr.message === "interactive_required") {
          // Trigger loginRedirect to allow user to sign in and acquire token on return
          await instance.loginRedirect(loginRequest);
          return; // navigation will happen
        }
        throw acqErr;
      }

      // 3) Call your proxy endpoint to link account
      // Endpoint is the Next.js proxy e.g. /api/auth/link which should forward to your auth service
      const resp = await fetch("/api/auth/link", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify({ patientId, linkToken }),
      });

      const data = await resp.json().catch(() => ({}));

      if (!resp.ok) {
        // show friendly message
        const msg = (data && data.error) || data.message || `Link failed (${resp.status})`;
        setError(String(msg));
        setLoading(false);
        return;
      }

      // Success
      setSuccess(true);
      setLoading(false);
      if (onLinked) onLinked(data);
    } catch (err: any) {
      console.error("Link error:", err);
      const msg =
        (err && err.message && String(err.message)) ||
        "Unexpected error during account linking. Try again.";
      setError(msg);
      setLoading(false);
    }
  }

  return (
    <div className="w-full max-w-xl mx-auto">
      {!success ? (
        <>
          <p className="mb-4 text-sm text-gray-600">
            To complete your account creation, sign in with your Microsoft account to link it to
            this patient record. This requires a one-time verification that you initiated the flow.
          </p>

          {error && (
            <div className="mb-4 p-3 bg-red-50 border border-red-200 text-red-700 rounded">
              {error}
            </div>
          )}

          <button
            onClick={handleLink}
            disabled={loading}
            className={`w-full inline-flex items-center justify-center gap-2 rounded-md px-4 py-3 text-white ${
              loading ? "bg-green-300" : "bg-green-600 hover:bg-green-700"
            }`}
          >
            {loading ? "Linking..." : "Sign in with Microsoft & Link Account"}
          </button>

          <div className="mt-3 text-xs text-gray-500">
            If you prefer not to link now, you can skip and link later from account settings.
          </div>
        </>
      ) : (
        <div className="p-4 border border-green-100 bg-green-50 rounded text-green-800">
          Linked successfully — you can now sign in with Microsoft to access this patient account.
        </div>
      )}
    </div>
  );
}
